-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/test_ip/picozed_t_ip_src_MeasureLatency.vhd
-- Created: 2025-10-08 11:52:52
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: picozed_t_ip_src_MeasureLatency
-- Source Path: test_ip/picozed_test_ip/MeasureLatency
-- Hierarchy Level: 1
-- Model version: 1.78
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY picozed_t_ip_src_MeasureLatency IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        counterStart                      :   IN    std_logic;
        counterStop                       :   IN    std_logic;
        countValue_o                      :   OUT   std_logic_vector(31 DOWNTO 0)  -- uint32
        );
END picozed_t_ip_src_MeasureLatency;


ARCHITECTURE rtl OF picozed_t_ip_src_MeasureLatency IS

  -- Component Declarations
  COMPONENT picozed_t_ip_src_Detect_Increase
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          U                               :   IN    std_logic;
          Y                               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT picozed_t_ip_src_Detect_Increase1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          U                               :   IN    std_logic;
          Y                               :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT picozed_t_ip_src_counterControl
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          counterStart                    :   IN    std_logic;
          counterStop                     :   IN    std_logic;
          cntRst                          :   OUT   std_logic;
          cntEn                           :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : picozed_t_ip_src_Detect_Increase
    USE ENTITY work.picozed_t_ip_src_Detect_Increase(rtl);

  FOR ALL : picozed_t_ip_src_Detect_Increase1
    USE ENTITY work.picozed_t_ip_src_Detect_Increase1(rtl);

  FOR ALL : picozed_t_ip_src_counterControl
    USE ENTITY work.picozed_t_ip_src_counterControl(rtl);

  -- Signals
  SIGNAL Detect_Increase_out1             : std_logic;
  SIGNAL Detect_Increase1_out1            : std_logic;
  SIGNAL cntRst                           : std_logic;
  SIGNAL cntEn                            : std_logic;
  SIGNAL count_step                       : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL count_reset                      : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL HDL_Counter_out1                 : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL count                            : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL count_1                          : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL count_2                          : unsigned(31 DOWNTO 0);  -- uint32

BEGIN
  -- ARM: everytime a register value is triggered,
  -- start counter at zero and start incrementing
  -- 
  -- Microblaze: trigger a register write to stop counter
  -- 
  -- Latency: Measure latency of counter

  u_Detect_Increase : picozed_t_ip_src_Detect_Increase
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              U => counterStart,
              Y => Detect_Increase_out1
              );

  u_Detect_Increase1 : picozed_t_ip_src_Detect_Increase1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              U => counterStop,
              Y => Detect_Increase1_out1
              );

  u_counterControl : picozed_t_ip_src_counterControl
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              counterStart => Detect_Increase_out1,
              counterStop => Detect_Increase1_out1,
              cntRst => cntRst,
              cntEn => cntEn
              );

  -- Free running, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  count_step <= to_unsigned(1, 32);

  count_reset <= to_unsigned(0, 32);

  count <= HDL_Counter_out1 + count_step;

  
  count_1 <= HDL_Counter_out1 WHEN cntEn = '0' ELSE
      count;

  
  count_2 <= count_1 WHEN cntRst = '0' ELSE
      count_reset;

  HDL_Counter_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        HDL_Counter_out1 <= to_unsigned(0, 32);
      ELSIF enb = '1' THEN
        HDL_Counter_out1 <= count_2;
      END IF;
    END IF;
  END PROCESS HDL_Counter_process;


  countValue_o <= std_logic_vector(HDL_Counter_out1);

END rtl;

