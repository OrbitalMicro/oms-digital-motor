-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/test_ip/picozed_t_ip_addr_decoder.vhd
-- Created: 2025-10-08 11:52:55
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: picozed_t_ip_addr_decoder
-- Source Path: picozed_t_ip/picozed_t_ip_axi4/picozed_t_ip_addr_decoder
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY picozed_t_ip_addr_decoder IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        data_write                        :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        addr_sel                          :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
        wr_enb                            :   IN    std_logic;  -- ufix1
        rd_enb                            :   IN    std_logic;  -- ufix1
        read_ip_timestamp                 :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        read_incrCount_o                  :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        read_measureLatency_o             :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        data_read                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_axi_enable                  :   OUT   std_logic;  -- ufix1
        write_countTrigger_i              :   OUT   std_logic;  -- ufix1
        write_countEnable_i               :   OUT   std_logic;  -- ufix1
        write_countMax_i                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_timer_isr_enable_i          :   OUT   std_logic;  -- ufix1
        write_counterDisable_i            :   OUT   std_logic  -- ufix1
        );
END picozed_t_ip_addr_decoder;


ARCHITECTURE rtl OF picozed_t_ip_addr_decoder IS

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL addr_sel_unsigned                : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL decode_sel_counterDisable_i_1_1  : std_logic;  -- ufix1
  SIGNAL decode_sel_timer_isr_enable_i_1_1 : std_logic;  -- ufix1
  SIGNAL decode_sel_countMax_i_1_1        : std_logic;  -- ufix1
  SIGNAL decode_sel_incrCount_o_1_1       : std_logic;  -- ufix1
  SIGNAL decode_sel_countEnable_i_1_1     : std_logic;  -- ufix1
  SIGNAL decode_sel_countTrigger_i_1_1    : std_logic;  -- ufix1
  SIGNAL decode_sel_ip_timestamp_1_1      : std_logic;  -- ufix1
  SIGNAL decode_sel_axi_enable_1_1        : std_logic;  -- ufix1
  SIGNAL const_0                          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL reg_enb_axi_enable_1_1           : std_logic;  -- ufix1
  SIGNAL data_write_unsigned              : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL data_in_axi_enable               : std_logic;  -- ufix1
  SIGNAL const_1_1                        : std_logic;  -- ufix1
  SIGNAL data_reg_axi_enable_1_1          : std_logic;  -- ufix1
  SIGNAL data_slice_axi_enable_1          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_axi_enable_1_1         : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_ip_timestamp_unsigned       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_ip_timestamp            : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_ip_timestamp_1_1       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL reg_enb_countTrigger_i_1_1       : std_logic;  -- ufix1
  SIGNAL data_in_countTrigger_i           : std_logic;  -- ufix1
  SIGNAL data_reg_countTrigger_i_1_1      : std_logic;  -- ufix1
  SIGNAL data_slice_countTrigger_i_1      : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_countTrigger_i_1_1     : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL reg_enb_countEnable_i_1_1        : std_logic;  -- ufix1
  SIGNAL data_in_countEnable_i            : std_logic;  -- ufix1
  SIGNAL data_reg_countEnable_i_1_1       : std_logic;  -- ufix1
  SIGNAL data_slice_countEnable_i_1       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_countEnable_i_1_1      : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_incrCount_o_unsigned        : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_measureLatency_o_1_1  : std_logic;  -- ufix1
  SIGNAL read_reg_incrCount_o             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_incrCount_o_1_1        : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_measureLatency_o_unsigned   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_measureLatency_o        : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_measureLatency_o_1_1   : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL reg_enb_countMax_i_1_1           : std_logic;  -- ufix1
  SIGNAL data_reg_countMax_i_1_1          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_countMax_i_1_1         : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL reg_enb_timer_isr_enable_i_1_1   : std_logic;  -- ufix1
  SIGNAL data_in_timer_isr_enable_i       : std_logic;  -- ufix1
  SIGNAL data_reg_timer_isr_enable_i_1_1  : std_logic;  -- ufix1
  SIGNAL data_slice_timer_isr_enable_i_1  : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_timer_isr_enable_i_1_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL reg_enb_counterDisable_i_1_1     : std_logic;  -- ufix1
  SIGNAL data_in_counterDisable_i         : std_logic;  -- ufix1
  SIGNAL data_reg_counterDisable_i_1_1    : std_logic;  -- ufix1
  SIGNAL data_slice_counterDisable_i_1    : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_counterDisable_i_1_1   : unsigned(31 DOWNTO 0);  -- ufix32

BEGIN
  addr_sel_unsigned <= unsigned(addr_sel);

  
  decode_sel_counterDisable_i_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0046#, 14) ELSE
      '0';

  
  decode_sel_timer_isr_enable_i_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0045#, 14) ELSE
      '0';

  
  decode_sel_countMax_i_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0044#, 14) ELSE
      '0';

  
  decode_sel_incrCount_o_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0042#, 14) ELSE
      '0';

  
  decode_sel_countEnable_i_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0041#, 14) ELSE
      '0';

  
  decode_sel_countTrigger_i_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0040#, 14) ELSE
      '0';

  
  decode_sel_ip_timestamp_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0002#, 14) ELSE
      '0';

  
  decode_sel_axi_enable_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0001#, 14) ELSE
      '0';

  const_0 <= to_unsigned(0, 32);

  reg_enb_axi_enable_1_1 <= decode_sel_axi_enable_1_1 AND wr_enb;

  data_write_unsigned <= unsigned(data_write);

  data_in_axi_enable <= data_write_unsigned(0);

  const_1_1 <= '1';

  enb <= const_1_1;

  reg_axi_enable_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_axi_enable_1_1 <= '1';
      ELSIF enb = '1' AND reg_enb_axi_enable_1_1 = '1' THEN
        data_reg_axi_enable_1_1 <= data_in_axi_enable;
      END IF;
    END IF;
  END PROCESS reg_axi_enable_1_1_process;


  data_slice_axi_enable_1 <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & data_reg_axi_enable_1_1;

  
  decode_rd_axi_enable_1_1 <= const_0 WHEN decode_sel_axi_enable_1_1 = '0' ELSE
      data_slice_axi_enable_1;

  read_ip_timestamp_unsigned <= unsigned(read_ip_timestamp);

  reg_ip_timestamp_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        read_reg_ip_timestamp <= to_unsigned(0, 32);
      ELSIF enb = '1' THEN
        read_reg_ip_timestamp <= read_ip_timestamp_unsigned;
      END IF;
    END IF;
  END PROCESS reg_ip_timestamp_process;


  
  decode_rd_ip_timestamp_1_1 <= decode_rd_axi_enable_1_1 WHEN decode_sel_ip_timestamp_1_1 = '0' ELSE
      read_reg_ip_timestamp;

  reg_enb_countTrigger_i_1_1 <= decode_sel_countTrigger_i_1_1 AND wr_enb;

  data_in_countTrigger_i <= data_write_unsigned(0);

  reg_countTrigger_i_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_countTrigger_i_1_1 <= '0';
      ELSIF enb = '1' AND reg_enb_countTrigger_i_1_1 = '1' THEN
        data_reg_countTrigger_i_1_1 <= data_in_countTrigger_i;
      END IF;
    END IF;
  END PROCESS reg_countTrigger_i_1_1_process;


  data_slice_countTrigger_i_1 <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & data_reg_countTrigger_i_1_1;

  
  decode_rd_countTrigger_i_1_1 <= decode_rd_ip_timestamp_1_1 WHEN decode_sel_countTrigger_i_1_1 = '0' ELSE
      data_slice_countTrigger_i_1;

  reg_enb_countEnable_i_1_1 <= decode_sel_countEnable_i_1_1 AND wr_enb;

  data_in_countEnable_i <= data_write_unsigned(0);

  reg_countEnable_i_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_countEnable_i_1_1 <= '0';
      ELSIF enb = '1' AND reg_enb_countEnable_i_1_1 = '1' THEN
        data_reg_countEnable_i_1_1 <= data_in_countEnable_i;
      END IF;
    END IF;
  END PROCESS reg_countEnable_i_1_1_process;


  data_slice_countEnable_i_1 <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & data_reg_countEnable_i_1_1;

  
  decode_rd_countEnable_i_1_1 <= decode_rd_countTrigger_i_1_1 WHEN decode_sel_countEnable_i_1_1 = '0' ELSE
      data_slice_countEnable_i_1;

  read_incrCount_o_unsigned <= unsigned(read_incrCount_o);

  
  decode_sel_measureLatency_o_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0043#, 14) ELSE
      '0';

  reg_incrCount_o_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        read_reg_incrCount_o <= to_unsigned(0, 32);
      ELSIF enb = '1' THEN
        read_reg_incrCount_o <= read_incrCount_o_unsigned;
      END IF;
    END IF;
  END PROCESS reg_incrCount_o_process;


  
  decode_rd_incrCount_o_1_1 <= decode_rd_countEnable_i_1_1 WHEN decode_sel_incrCount_o_1_1 = '0' ELSE
      read_reg_incrCount_o;

  read_measureLatency_o_unsigned <= unsigned(read_measureLatency_o);

  reg_measureLatency_o_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        read_reg_measureLatency_o <= to_unsigned(0, 32);
      ELSIF enb = '1' THEN
        read_reg_measureLatency_o <= read_measureLatency_o_unsigned;
      END IF;
    END IF;
  END PROCESS reg_measureLatency_o_process;


  
  decode_rd_measureLatency_o_1_1 <= decode_rd_incrCount_o_1_1 WHEN decode_sel_measureLatency_o_1_1 = '0' ELSE
      read_reg_measureLatency_o;

  reg_enb_countMax_i_1_1 <= decode_sel_countMax_i_1_1 AND wr_enb;

  reg_countMax_i_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_countMax_i_1_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_countMax_i_1_1 = '1' THEN
        data_reg_countMax_i_1_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_countMax_i_1_1_process;


  
  decode_rd_countMax_i_1_1 <= decode_rd_measureLatency_o_1_1 WHEN decode_sel_countMax_i_1_1 = '0' ELSE
      data_reg_countMax_i_1_1;

  reg_enb_timer_isr_enable_i_1_1 <= decode_sel_timer_isr_enable_i_1_1 AND wr_enb;

  data_in_timer_isr_enable_i <= data_write_unsigned(0);

  reg_timer_isr_enable_i_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_timer_isr_enable_i_1_1 <= '0';
      ELSIF enb = '1' AND reg_enb_timer_isr_enable_i_1_1 = '1' THEN
        data_reg_timer_isr_enable_i_1_1 <= data_in_timer_isr_enable_i;
      END IF;
    END IF;
  END PROCESS reg_timer_isr_enable_i_1_1_process;


  data_slice_timer_isr_enable_i_1 <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & data_reg_timer_isr_enable_i_1_1;

  
  decode_rd_timer_isr_enable_i_1_1 <= decode_rd_countMax_i_1_1 WHEN decode_sel_timer_isr_enable_i_1_1 = '0' ELSE
      data_slice_timer_isr_enable_i_1;

  reg_enb_counterDisable_i_1_1 <= decode_sel_counterDisable_i_1_1 AND wr_enb;

  data_in_counterDisable_i <= data_write_unsigned(0);

  reg_counterDisable_i_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_counterDisable_i_1_1 <= '0';
      ELSIF enb = '1' AND reg_enb_counterDisable_i_1_1 = '1' THEN
        data_reg_counterDisable_i_1_1 <= data_in_counterDisable_i;
      END IF;
    END IF;
  END PROCESS reg_counterDisable_i_1_1_process;


  data_slice_counterDisable_i_1 <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & data_reg_counterDisable_i_1_1;

  
  decode_rd_counterDisable_i_1_1 <= decode_rd_timer_isr_enable_i_1_1 WHEN decode_sel_counterDisable_i_1_1 = '0' ELSE
      data_slice_counterDisable_i_1;

  data_read <= std_logic_vector(decode_rd_counterDisable_i_1_1);

  write_countMax_i <= std_logic_vector(data_reg_countMax_i_1_1);

  write_axi_enable <= data_reg_axi_enable_1_1;

  write_countTrigger_i <= data_reg_countTrigger_i_1_1;

  write_countEnable_i <= data_reg_countEnable_i_1_1;

  write_timer_isr_enable_i <= data_reg_timer_isr_enable_i_1_1;

  write_counterDisable_i <= data_reg_counterDisable_i_1_1;

END rtl;

