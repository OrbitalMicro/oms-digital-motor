-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/test_ip/picozed_t_ip_src_picozed_test_ip.vhd
-- Created: 2025-10-08 11:52:52
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1
-- Target subsystem base rate: 1
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- incrCount_o                   ce_out        1
-- measureLatency_o              ce_out        1
-- isr_trigger_0                 ce_out        1
-- isr_trigger_1                 ce_out        1
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: picozed_t_ip_src_picozed_test_ip
-- Source Path: test_ip/picozed_test_ip
-- Hierarchy Level: 0
-- Model version: 1.78
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY picozed_t_ip_src_picozed_test_ip IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        countTrigger_i                    :   IN    std_logic;
        countEnable_i                     :   IN    std_logic;
        countMax_i                        :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        timer_isr_enable_i                :   IN    std_logic;
        counterDisable_i                  :   IN    std_logic;
        ce_out                            :   OUT   std_logic;
        incrCount_o                       :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
        measureLatency_o                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
        isr_trigger_0                     :   OUT   std_logic;
        isr_trigger_1                     :   OUT   std_logic
        );
END picozed_t_ip_src_picozed_test_ip;


ARCHITECTURE rtl OF picozed_t_ip_src_picozed_test_ip IS

  -- Component Declarations
  COMPONENT picozed_t_ip_src_countFSM
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          trigger_i                       :   IN    std_logic;
          count_o                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- uint32
          );
  END COMPONENT;

  COMPONENT picozed_t_ip_src_MeasureLatency
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          counterStart                    :   IN    std_logic;
          counterStop                     :   IN    std_logic;
          countValue_o                    :   OUT   std_logic_vector(31 DOWNTO 0)  -- uint32
          );
  END COMPONENT;

  COMPONENT picozed_t_ip_src_TimerISR
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          enable_i                        :   IN    std_logic;
          countMax_i                      :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
          isrTrigger                      :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : picozed_t_ip_src_countFSM
    USE ENTITY work.picozed_t_ip_src_countFSM(rtl);

  FOR ALL : picozed_t_ip_src_MeasureLatency
    USE ENTITY work.picozed_t_ip_src_MeasureLatency(rtl);

  FOR ALL : picozed_t_ip_src_TimerISR
    USE ENTITY work.picozed_t_ip_src_TimerISR(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL Delay_out1                       : std_logic;
  SIGNAL count_o                          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL count_o_unsigned                 : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Delay4_out1                      : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL MeasureLatency_out1              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL isrTrigger                       : std_logic;

BEGIN
  -- Microblaze tells counter 
  -- to stop after receiving ISR
  -- in call back routine
  -- ARM triggers IRQ with reg-write
  -- ISR Triggers for Microblaze

  u_countFSM : picozed_t_ip_src_countFSM
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              trigger_i => Delay_out1,
              count_o => count_o  -- uint32
              );

  u_MeasureLatency : picozed_t_ip_src_MeasureLatency
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              counterStart => countEnable_i,
              counterStop => counterDisable_i,
              countValue_o => MeasureLatency_out1  -- uint32
              );

  u_TimerISR : picozed_t_ip_src_TimerISR
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              enable_i => timer_isr_enable_i,
              countMax_i => countMax_i,  -- uint32
              isrTrigger => isrTrigger
              );

  enb <= clk_enable;

  Delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay_out1 <= '0';
      ELSIF enb = '1' THEN
        Delay_out1 <= countTrigger_i;
      END IF;
    END IF;
  END PROCESS Delay_process;


  count_o_unsigned <= unsigned(count_o);

  Delay4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay4_out1 <= to_unsigned(0, 32);
      ELSIF enb = '1' THEN
        Delay4_out1 <= count_o_unsigned;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  incrCount_o <= std_logic_vector(Delay4_out1);

  ce_out <= clk_enable;

  measureLatency_o <= MeasureLatency_out1;

  isr_trigger_0 <= countEnable_i;

  isr_trigger_1 <= isrTrigger;

END rtl;

