-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/test_ip/picozed_t_ip_src_counterControl.vhd
-- Created: 2025-10-08 11:52:52
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: picozed_t_ip_src_counterControl
-- Source Path: test_ip/picozed_test_ip/MeasureLatency/counterControl
-- Hierarchy Level: 2
-- Model version: 1.78
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY picozed_t_ip_src_counterControl IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        counterStart                      :   IN    std_logic;
        counterStop                       :   IN    std_logic;
        cntRst                            :   OUT   std_logic;
        cntEn                             :   OUT   std_logic
        );
END picozed_t_ip_src_counterControl;


ARCHITECTURE rtl OF picozed_t_ip_src_counterControl IS

  -- Signals
  SIGNAL counterState                     : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL counterState_next                : unsigned(1 DOWNTO 0);  -- ufix2

BEGIN
  counterControl_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        counterState <= to_unsigned(16#0#, 2);
      ELSIF enb = '1' THEN
        counterState <= counterState_next;
      END IF;
    END IF;
  END PROCESS counterControl_process;

  counterControl_output : PROCESS (counterStart, counterState, counterStop)
  BEGIN
    counterState_next <= counterState;
    -- Evaluate pulses coming in from counterStart and counterStop
    cntRst <= '0';
    cntEn <= '0';
    CASE counterState IS
      WHEN "00" =>
        IF counterStart = '1' THEN 
          -- received pulse to start latency measurement
          counterState_next <= to_unsigned(16#1#, 2);
          cntRst <= '1';
          -- reset the counter value before we start counter
        END IF;
      WHEN "01" =>
        IF counterStop = '1' THEN 
          -- received pulse to stop counting
          counterState_next <= to_unsigned(16#0#, 2);
        ELSE 
          cntEn <= '1';
        END IF;
      WHEN OTHERS => 
        counterState_next <= to_unsigned(16#0#, 2);
    END CASE;
  END PROCESS counterControl_output;


END rtl;

