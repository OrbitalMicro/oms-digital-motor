-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/test_ip/picozed_t_ip_src_TimerISR.vhd
-- Created: 2025-10-08 11:52:52
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: picozed_t_ip_src_TimerISR
-- Source Path: test_ip/picozed_test_ip/TimerISR
-- Hierarchy Level: 1
-- Model version: 1.78
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY picozed_t_ip_src_TimerISR IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enable_i                          :   IN    std_logic;
        countMax_i                        :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        isrTrigger                        :   OUT   std_logic
        );
END picozed_t_ip_src_TimerISR;


ARCHITECTURE rtl OF picozed_t_ip_src_TimerISR IS

  -- Signals
  SIGNAL countMax_i_unsigned              : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL countMax_reg                     : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL timerState                       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL counterTick                      : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL countMax_reg_next                : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL timerState_next                  : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL counterTick_next                 : unsigned(31 DOWNTO 0);  -- uint32

BEGIN
  countMax_i_unsigned <= unsigned(countMax_i);

  TimerISR_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        countMax_reg <= to_unsigned(16#05F5E100#, 32);
        timerState <= to_unsigned(16#0#, 2);
        counterTick <= to_unsigned(16#00000000#, 32);
      ELSIF enb = '1' THEN
        countMax_reg <= countMax_reg_next;
        timerState <= timerState_next;
        counterTick <= counterTick_next;
      END IF;
    END IF;
  END PROCESS TimerISR_process;

  TimerISR_output : PROCESS (countMax_i_unsigned, countMax_reg, counterTick, enable_i, timerState)
  BEGIN
    countMax_reg_next <= countMax_reg;
    timerState_next <= timerState;
    counterTick_next <= counterTick;
    -- If the clock rate is 100 MHz,
    -- Make default timer 100e6, or, 1 second interrupt timer
    --%%
    -- S_ENABLE_WAIT
    -- S_COUNTING
    -- S_MAX_VALUE
    isrTrigger <= '0';
    CASE timerState IS
      WHEN "00" =>
        IF countMax_i_unsigned /= to_unsigned(16#00000000#, 32) THEN 
          countMax_reg_next <= countMax_i_unsigned;
        END IF;
        IF enable_i = '1' THEN 
          timerState_next <= to_unsigned(16#1#, 2);
        END IF;
      WHEN "01" =>
        IF counterTick >= (countMax_reg - 2) THEN 
          -- count when we're one away
          timerState_next <= to_unsigned(16#2#, 2);
        END IF;
        counterTick_next <= counterTick + 1;
      WHEN "10" =>
        -- Reached max value, trigger ISR
        counterTick_next <= to_unsigned(16#00000000#, 32);
        isrTrigger <= '1';
        IF countMax_i_unsigned /= to_unsigned(16#00000000#, 32) THEN 
          countMax_reg_next <= countMax_i_unsigned;
        END IF;
        IF ( NOT enable_i) = '1' THEN 
          timerState_next <= to_unsigned(16#0#, 2);
        ELSE 
          timerState_next <= to_unsigned(16#1#, 2);
        END IF;
      WHEN OTHERS => 
        NULL;
    END CASE;
  END PROCESS TimerISR_output;


END rtl;

