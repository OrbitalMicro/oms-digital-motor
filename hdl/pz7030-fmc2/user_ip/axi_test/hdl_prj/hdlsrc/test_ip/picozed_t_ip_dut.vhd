-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj/hdlsrc/test_ip/picozed_t_ip_dut.vhd
-- Created: 2025-10-08 11:52:55
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: picozed_t_ip_dut
-- Source Path: picozed_t_ip/picozed_t_ip_dut
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY picozed_t_ip_dut IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        dut_enable                        :   IN    std_logic;  -- ufix1
        countTrigger_i                    :   IN    std_logic;  -- ufix1
        countEnable_i                     :   IN    std_logic;  -- ufix1
        countMax_i                        :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        timer_isr_enable_i                :   IN    std_logic;  -- ufix1
        counterDisable_i                  :   IN    std_logic;  -- ufix1
        ce_out                            :   OUT   std_logic;  -- ufix1
        incrCount_o                       :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        measureLatency_o                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        isr_trigger_0                     :   OUT   std_logic;  -- ufix1
        isr_trigger_1                     :   OUT   std_logic  -- ufix1
        );
END picozed_t_ip_dut;


ARCHITECTURE rtl OF picozed_t_ip_dut IS

  -- Component Declarations
  COMPONENT picozed_t_ip_src_picozed_test_ip
    PORT( clk                             :   IN    std_logic;
          clk_enable                      :   IN    std_logic;
          reset                           :   IN    std_logic;
          countTrigger_i                  :   IN    std_logic;  -- ufix1
          countEnable_i                   :   IN    std_logic;  -- ufix1
          countMax_i                      :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          timer_isr_enable_i              :   IN    std_logic;  -- ufix1
          counterDisable_i                :   IN    std_logic;  -- ufix1
          ce_out                          :   OUT   std_logic;  -- ufix1
          incrCount_o                     :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          measureLatency_o                :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          isr_trigger_0                   :   OUT   std_logic;  -- ufix1
          isr_trigger_1                   :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : picozed_t_ip_src_picozed_test_ip
    USE ENTITY work.picozed_t_ip_src_picozed_test_ip(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL countTrigger_i_sig               : std_logic;  -- ufix1
  SIGNAL countEnable_i_sig                : std_logic;  -- ufix1
  SIGNAL timer_isr_enable_i_sig           : std_logic;  -- ufix1
  SIGNAL counterDisable_i_sig             : std_logic;  -- ufix1
  SIGNAL ce_out_sig                       : std_logic;  -- ufix1
  SIGNAL incrCount_o_sig                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL measureLatency_o_sig             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL isr_trigger_0_sig                : std_logic;  -- ufix1
  SIGNAL isr_trigger_1_sig                : std_logic;  -- ufix1

BEGIN
  u_picozed_t_ip_src_picozed_test_ip : picozed_t_ip_src_picozed_test_ip
    PORT MAP( clk => clk,
              clk_enable => enb,
              reset => reset,
              countTrigger_i => countTrigger_i_sig,  -- ufix1
              countEnable_i => countEnable_i_sig,  -- ufix1
              countMax_i => countMax_i,  -- ufix32
              timer_isr_enable_i => timer_isr_enable_i_sig,  -- ufix1
              counterDisable_i => counterDisable_i_sig,  -- ufix1
              ce_out => ce_out_sig,  -- ufix1
              incrCount_o => incrCount_o_sig,  -- ufix32
              measureLatency_o => measureLatency_o_sig,  -- ufix32
              isr_trigger_0 => isr_trigger_0_sig,  -- ufix1
              isr_trigger_1 => isr_trigger_1_sig  -- ufix1
              );

  countTrigger_i_sig <= countTrigger_i;

  countEnable_i_sig <= countEnable_i;

  timer_isr_enable_i_sig <= timer_isr_enable_i;

  counterDisable_i_sig <= counterDisable_i;

  enb <= dut_enable;

  ce_out <= ce_out_sig;

  incrCount_o <= incrCount_o_sig;

  measureLatency_o <= measureLatency_o_sig;

  isr_trigger_0 <= isr_trigger_0_sig;

  isr_trigger_1 <= isr_trigger_1_sig;

END rtl;

